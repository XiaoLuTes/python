{"uid":"7a8d695d5f235231","name":"查询指定目录下时光轴照片（新，用于年月日时光轴-冒烟","fullName":"test_file.TestFile#test_excel_cloud","historyId":"fd76ce085ac520823cff0266da9181e4","time":{"start":1679361575700,"stop":1679361575729,"duration":29},"status":"broken","statusMessage":"TypeError: unsupported operand type(s) for +: 'NoneType' and 'int'","statusTrace":"self = <test_file.TestFile object at 0x000001D985DCEC10>\nfile = {'case_id': None, 'data': '{\\n    \"parentFileId\": \"\"\\n}', 'extract': None, 'headers': '${headers_saas}', ...}\n\n    @pytest.mark.parametrize('file', excel_read.Excel().excel_read(fileload))\n    def test_excel_cloud(self, file):\n        name = file['name']\n        allure.dynamic.title(name)\n        url = yaml_util.read_yaml('url_saas_real') + file['url']\n        allure.attach(body='' + url + '', name='请求路径', attachment_type=allure.attachment_type.TEXT)\n        method = file['method']\n        headers = self.replace_value(file['headers'])\n        allure.attach(body=json.dumps(headers), name='请求头', attachment_type=allure.attachment_type.JSON)\n        data = self.replace_value(file['data'])\n        allure.attach(body=json.dumps(data), name='请求参数', attachment_type=allure.attachment_type.JSON)\n        self.req = request_util.send_request(method=method, url=url, data=data, headers=headers)\n        allure.attach(body=self.req.text, name='响应参数', attachment_type=allure.attachment_type.JSON)\n        self.extract_value(file)\n>       excel_read.Excel().excel_write(fileload, file['case_id']+1, 7,\n                                       self.req.text)\nE       TypeError: unsupported operand type(s) for +: 'NoneType' and 'int'\n\ntest_file.py:159: TypeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"execute_session","time":{"start":1679361574619,"stop":1679361574630,"duration":11},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"TypeError: unsupported operand type(s) for +: 'NoneType' and 'int'","statusTrace":"self = <test_file.TestFile object at 0x000001D985DCEC10>\nfile = {'case_id': None, 'data': '{\\n    \"parentFileId\": \"\"\\n}', 'extract': None, 'headers': '${headers_saas}', ...}\n\n    @pytest.mark.parametrize('file', excel_read.Excel().excel_read(fileload))\n    def test_excel_cloud(self, file):\n        name = file['name']\n        allure.dynamic.title(name)\n        url = yaml_util.read_yaml('url_saas_real') + file['url']\n        allure.attach(body='' + url + '', name='请求路径', attachment_type=allure.attachment_type.TEXT)\n        method = file['method']\n        headers = self.replace_value(file['headers'])\n        allure.attach(body=json.dumps(headers), name='请求头', attachment_type=allure.attachment_type.JSON)\n        data = self.replace_value(file['data'])\n        allure.attach(body=json.dumps(data), name='请求参数', attachment_type=allure.attachment_type.JSON)\n        self.req = request_util.send_request(method=method, url=url, data=data, headers=headers)\n        allure.attach(body=self.req.text, name='响应参数', attachment_type=allure.attachment_type.JSON)\n        self.extract_value(file)\n>       excel_read.Excel().excel_write(fileload, file['case_id']+1, 7,\n                                       self.req.text)\nE       TypeError: unsupported operand type(s) for +: 'NoneType' and 'int'\n\ntest_file.py:159: TypeError","steps":[],"attachments":[{"uid":"e6b57890949f36f5","name":"请求路径","source":"e6b57890949f36f5.txt","type":"text/plain","size":60},{"uid":"cb86c3b502fe4513","name":"请求头","source":"cb86c3b502fe4513.json","type":"application/json","size":400},{"uid":"ff46a22cc74390e1","name":"请求参数","source":"ff46a22cc74390e1.json","type":"application/json","size":20},{"uid":"9250a01d78270d6d","name":"响应参数","source":"9250a01d78270d6d.json","type":"application/json","size":75}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":4,"stepsCount":0,"hasContent":true},"afterStages":[{"name":"execute_session::0","time":{"start":1679361576847,"stop":1679361576847,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false}],"labels":[{"name":"suite","value":"test_file"},{"name":"subSuite","value":"TestFile"},{"name":"host","value":"小小卢"},{"name":"thread","value":"55844-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_file"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"file","value":"{'case_id': None, 'name': '查询指定目录下时光轴照片（新，用于年月日时光轴-冒烟', 'headers': '${headers_saas}', 'method': 'post', 'url': '/timeLine/queryItems', 'data': '{\\n    \"parentFileId\": \"\"\\n}', 'result': '{\"success\":true,\"code\":\"0000\",\"message\":\"请求成功\",\"data\":{\"albumId\":\"hYLkaJJiM7m\",\"owner\":\"1069539728929497164\",\"name\":\"666\",\"description\":\"描述\",\"cover\":null,\"createdAt\":\"2023-03-20T08:36:14.191Z\",\"updatedAt\":\"2023-03-20T08:36:14.191Z\",\"fileCount\":0}}', 'extract': None, 'validata': None}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"7a8d695d5f235231.json","parameterValues":["{'case_id': None, 'name': '查询指定目录下时光轴照片（新，用于年月日时光轴-冒烟', 'headers': '${headers_saas}', 'method': 'post', 'url': '/timeLine/queryItems', 'data': '{\\n    \"parentFileId\": \"\"\\n}', 'result': '{\"success\":true,\"code\":\"0000\",\"message\":\"请求成功\",\"data\":{\"albumId\":\"hYLkaJJiM7m\",\"owner\":\"1069539728929497164\",\"name\":\"666\",\"description\":\"描述\",\"cover\":null,\"createdAt\":\"2023-03-20T08:36:14.191Z\",\"updatedAt\":\"2023-03-20T08:36:14.191Z\",\"fileCount\":0}}', 'extract': None, 'validata': None}"]}